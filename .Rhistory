sweet <- merge(bookings,pricing)
?sapply
?toupper
sapply(bookings$POSTCODES,toupper)
bookings$POSTCODES
?substring
bookings$POSTCODES <- sapply(bookings$POSTCODES,toupper)
bookings$POSTCODES <- substring(bookings$POSTCODES,1,4)
bookings$POSTCODES <- gsub("\\s...", "", bookings$POSTCODES)
bookings$POSTCODES
bookings$POSTCODES <- as.factor(bookings$POSTCODES)
bookings$POSTCODES
pricing$POSTCODES
sweet <- merge(bookings,pricing)
sweet <- merge(bookings,pricing, all.x = TRUE)
write.csv(sweet, '~/desktop/mergeattempt.csv')
head(pricedBookings)
head(sweet)
pricedBookings <- merge(bookings, pricing, all.x = TRUE)
pricedBookings <- pricedBooking[ order(-pricedBookings[,34], decreasing = TRUE),]
pricedBookings <- merge(bookings, pricing, all.x = TRUE)
pricedBookings <- pricedBookings[ order(-pricedBookings[,34], decreasing = TRUE),]
pricedBookings <- merge(bookings, pricing, all.x = TRUE)
pricedBookings <- pricedBookings[ order(pricedBookings[,34], decreasing = TRUE),]
write.csv(pricedBookings, '~/desktop/mergeattempt.csv')
pricedBookings <- pricedBookings[ order(as.Date(pricedBookings[,34]), decreasing = TRUE),]
?names
names(pricedBookings) <- NULL
#create summaries by date
write.csv(pricedBookings, '~/desktop/pricedBookingsDatabase.csv')
?as.Date
pricedBookings[1,34]
pricedBookings <- merge(bookings, pricing, all.x = TRUE)
pricedBookings <- pricedBookings[ order(as.Date(pricedBookings[,34]), decreasing = TRUE),]
row.names(pricedBookings) <- NULL
pricedBookings[1,34]
as.Date(pricedBookings[1,34])
as.Date(pricedBookings[1,34],format = "%d-%m-%Y")
as.Date(pricedBookings[1,34],format = "%Y-%m-%d")
as.Date(as.character(pricedBookings[1,34]),format = "%d-%m-%Y")
as.Date(pricedBookings[1,34],format = "%d/%m/%Y")
pricedBookings <- merge(bookings, pricing, all.x = TRUE)
pricedBookings <- pricedBookings[ order(as.Date(pricedBookings[,34],format = "%d/%m/%Y"), decreasing = TRUE),]
row.names(pricedBookings) <- NULL
#create summaries by date
write.csv(pricedBookings, '~/desktop/pricedBookingsDatabase.csv')
pricedBookings[,34] <- as.Date(pricedBookings[,34],format = "%d/%m/%Y")
head(pricedBookings)
byDate <- ddply (pricedBookings, c("Outward.Journey.Delivery.Date"), summarize, bookings = length(Is.Cancelled), totalBags = sum(Total.Luggage.Count), meanBags = mean(Total.Luggage.Count), netRevenue = sum(Booking.Value)/1.2, adHoc.Cost.Estimate = sum(Minimum))
write.csv(pricedBookings, '~/desktop/costByDate.csv')
write.csv(byDate, '~/desktop/costByDate.csv')
byDate <- ddply (pricedBookings, c("Outward.Journey.Delivery.Date"), summarize, bookings = length(Is.Cancelled), totalBags = sum(Total.Luggage.Count), meanBags = mean(Total.Luggage.Count), netRevenue = sum(Booking.Value)/1.2, adHoc.Cost.Estimate = sum(Minimum))
byDate <- byDate[ order(as.Date(pricedBookings[,34]), decreasing = TRUE),]
#save byDate summary
write.csv(byDate, '~/desktop/costByDate.csv')
byDate <- ddply (pricedBookings, c("Outward.Journey.Delivery.Date"), summarize, bookings = length(Is.Cancelled), totalBags = sum(Total.Luggage.Count), meanBags = mean(Total.Luggage.Count), netRevenue = sum(Booking.Value)/1.2, adHoc.Cost.Estimate = sum(Minimum))
byDate <- byDate[ order(as.Date(pricedBookings[,34]), decreasing = TRUE),]
#save byDate summary
write.csv(byDate, '~/desktop/costByDate.csv')
pricedBookings$Outward.Journey.Delivery.Date <- as.Date(pricedBookings$Outward.Journey.Delivery.Date,format = "%d/%m/%Y")
byDate <- ddply (pricedBookings, c("Outward.Journey.Delivery.Date"), summarize, bookings = length(Is.Cancelled), totalBags = sum(Total.Luggage.Count), meanBags = mean(Total.Luggage.Count), netRevenue = sum(Booking.Value)/1.2, adHoc.Cost.Estimate = sum(Minimum))
byDate <- byDate[ order(byDate$Outward.Journey.Delivery.Date, decreasing = TRUE),]
#save byDate summary
write.csv(byDate, '~/desktop/costByDate.csv')
pricedBookings$Outward.Journey.Delivery.Date <- as.Date(pricedBookings$Outward.Journey.Delivery.Date,format = "%d/%m/%Y")
byDate <- ddply (pricedBookings, c("Outward.Journey.Delivery.Date"), summarize, bookings = length(Is.Cancelled), totalBags = sum(Total.Luggage.Count), meanBags = mean(Total.Luggage.Count), netRevenue = sum(Booking.Value)/1.2, adHoc.Cost.Estimate = sum(Minimum))
byDate <- byDate[ order(byDate$Outward.Journey.Delivery.Date, decreasing = TRUE),]
#save byDate summary
write.csv(byDate, '~/desktop/costByDate.csv')
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
day <- Mon #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == day)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
data$Day
day
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- Mon #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == weekDay)
row.names(data.lite) <- NULL
weekDay
weekDay <- as.factor('Mon')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.factor('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
data.lite$Day
weekDay
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.factor('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.factor('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
weekDay
data.lite$Day <- as.character(data.lite$Day)
weekDay <- as.character('Mon')
data.lite <- subset(data, Day == weekDay)
data.lite
test
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
data.lite
#Working code
#Calculates a simple delivery route
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
store <- test[1,]
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral14to16DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 12 #time slot beginning time
Time2 <- 14 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
store <- test[1,]
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral12to14DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 12 #time slot beginning time
Time2 <- 14 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
Start <- 'E16 2PX' #sets postcode of starting location, in this case the airport
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*{
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
test[,1] <- Start
store <- test[1,]
}
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral12to14DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
Start <- 'E16 2PX' #sets postcode of starting location, in this case the airport
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*{
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
test[,1] <- Start
store <- test[1,]
}
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral14to16DeliveryRoute1.csv")
library('maps')
map('london')
map("state")
map("uk")
?map
library(ggmap)
geocode("Imperial College London")
c(-0.1748772,51.4988)
setwd("~/Desktop/OneDrive/AirPortr/Analytics/ShinyDashOne/Dash-Two")
library(shiny)
runApp()
library(shinyApp)
library(shinyApps)
library(shinyapps)
deployApp()
